syntax = "proto3";

package rdmafs;

option csharp_namespace = "RdmaFs";

message Path            { string path   = 1; }                // “/foo/bar”
message Attr            { bytes  stat   = 1; int32  return_code  = 2; }                // struct stat in wire format
message Empty           {}
message Dirent {
  string name = 1;
  uint64 ino = 2;
  uint32 mode = 3;
}

message Accessrequest {
  string path = 1;
  int32 mask = 2;
}

message Readlinkrequest {
  string path = 1;
  uint32 size = 2;
}

message Readlinkreply {
  string data = 1;
  int32 return_code = 2;
}

message Mknodrequest {
  string path = 1;
  uint32 mode = 2;
  uint64 rdev = 3;
}

message Readdirreply {
  int32 return_code = 1;
  repeated Dirent entries = 2;
}

message Openrequest     { string path   = 1; int32 flags = 2; }
message Openreply       { int32 return_code = 1; uint64 fh     = 2; }                // opaque handle

message Createrequest {string path = 1; int32 flags = 2; uint32 mode = 3;}

message Readrequest     { optional uint64 fh     = 1; uint64 offset  = 2; uint32 size = 3; string path=4; }
message Readreply       { bytes  data   = 1; int32 return_code = 2;}


message WriteChunk      { uint64 fh     = 1; uint64 off  = 2; bytes data = 3; }
message MessageStatus          { int32  return_code  = 1; }                // 0 on success, -errno otherwise
message Timespec {
  int64 st_atim = 1;
  int64 st_mtim = 2;
}

message HelloRequest {
  string name = 1;
}

message HelloReply {
  string message = 1;
}

service Backuper {
  rpc SayHello (HelloRequest) returns (HelloReply);
  rpc Utimens (Path)             returns (Timespec);
  rpc Access  (Accessrequest)             returns (Messagestatus);
  rpc Getattr (Path)             returns (Attr);
  rpc Readlink (Path)            returns (Readlinkreply);
  rpc Readdir (Path)             returns (Readdirreply);
  rpc Mknod (Mknodrequest)  returns (Messagestatus);
  rpc Open    (Openrequest)      returns (Openreply);
  rpc Create  (Openrequest)      returns (Openreply);
  rpc Read    (Readrequest)      returns (Readreply);
  rpc Write   (stream WriteChunk)returns (Messagestatus);
  rpc Release (Openreply)        returns (Messagestatus);
  rpc Mkdir   (Path)             returns (Messagestatus);
  rpc Unlink  (Path)             returns (Messagestatus);
}
